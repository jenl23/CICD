@Library('retort-lib') _
def label = "jenkins-${UUID.randomUUID().toString()}"

def repo
def ZCP_USERID='awesome-cicd'
def K8S_NAMESPACE='awesome-shopping'
def DOCKER_IMAGE='${DOCKER_PROJECT}/product'
def DOCKER_VERSION="0.0.1-${BUILD_NUMBER}"
def DEPLOY_YAME="deploy-${BUILD_NUMBER}.yaml"

def BLUE_DEPLOY_DIR='overlay/dev/product-blue'
def GREEN_DEPLOY_DIR='overlay/dev/product-green'

def BLUE_NAME='product-blue-app-v1-dev'
def GREEN_NAME='product-green-app-v1-dev'

def GREEN_DEPLOYED = false

timestamps {
    podTemplate(label:label,
        serviceAccount: "zcp-system-sa-${ZCP_USERID}",
        containers: [
            containerTemplate(name: 'maven', image: 'maven:3.6.3-jdk-11-slim', ttyEnabled: true, command: 'cat'),
            containerTemplate(name: 'docker', image: 'docker:17-dind', ttyEnabled: true, command: 'dockerd-entrypoint.sh', privileged: true),
            containerTemplate(name: 'tools', image: 'argoproj/argo-cd-ci-builder:v1.0.0', command: 'cat', ttyEnabled: true),
            containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl:v1.18.2', ttyEnabled: true, command: 'cat'),
            containerTemplate(name: 'kustomize', image: 'gauravgaglani/k8s-kustomize:1.1.0', ttyEnabled: true, command: 'cat')
        ],
        volumes: [
            persistentVolumeClaim(mountPath: '/root/.m2', claimName: 'zcp-jenkins-mvn-repo')
        ]) {
    
        node(label) {
            stage('SOURCE CHECKOUT') {
                repo = checkout scm
            }

            stage('CHECKOUT') {
                container('tools') {
                    echo '개발소스쪽 Git Repo로 Checkout'
                    sh 'git checkout origin1/master'
                }
            }

            stage('BUILD') {
                container('maven') {
                    mavenBuild goal: 'clean package -DskipTests=true -f pom.xml', systemProperties:['maven.repo.local':"/root/.m2/${JOB_NAME}"]
                }
            }
    
            stage('BUILD DOCKER IMAGE') {
                container('docker') {
                    dockerCmd.build tag: "${HARBOR_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_VERSION}"
                    dockerCmd.push registry: HARBOR_REGISTRY, imageName: DOCKER_IMAGE, imageVersion: DOCKER_VERSION, credentialsId: "HARBOR_CREDENTIALS"
                }
            }
            
            dir("${GREEN_DEPLOY_DIR}") {
                stage('Deploy to dev') {
                    withCredentials([usernamePassword(credentialsId: 'GIT_CREDENTIALS', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PWD')]) {
                        container('tools') {
                            sh "git checkout origin/master"
                            sh "git config remote.origin.url https://${GIT_USER}:${GIT_PWD}@${repo.GIT_URL_1}"
                            sh "git config --global user.email '${GIT_USER}.sk.com'"
                            sh "git config --global user.name '${GIT_USER}'"
                            sh "kustomize edit set image ${HARBOR_REGISTRY}/${DOCKER_PROJECT}/microservice=${HARBOR_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_VERSION}"

                            echo "git pull origin HEAD:master && git add . && git commit -am 'Publish new version ${DOCKER_VERSION} to dev'; git push origin HEAD:master"
                            waitUntil {
                                try {
                                    sh "git pull origin HEAD:master && git add . && git commit -am 'Publish new version ${DOCKER_VERSION} to dev'; git push origin HEAD:master"
                                    true
                                } catch(error) {
                                    input "Retry the job?"
                                    sh "git reset --mixed HEAD^"
                                    false
                                }
                            }
                        }
                    }
                }
            }

            stage('BUILD K8S YAML') {
                container('kustomize') {
                    sh "kustomize build --load_restrictor none ${GREEN_DEPLOY_DIR} > ${GREEN_DEPLOY_DIR}/${DEPLOY_YAME}"
                    echo 'Kubernetes 배포 yaml 생성 내역'
                    sh "cat ${GREEN_DEPLOY_DIR}/${DEPLOY_YAME}"
                }
            }

            stage('DEPLOY') {
                container('kubectl') {
                    kubeCmd.apply file: "${GREEN_DEPLOY_DIR}/${DEPLOY_YAME}", wait: 300, recoverOnFail: false, namespace: K8S_NAMESPACE
                }
            }

            stage('SWITCH GREEN') {
                container('kubectl') {
                    try { 
                        input("Green으로 전환하시겠습니까?") 
                        println "Green으로 전환 시작" 
                        sh """
                            kubectl -n ${K8S_NAMESPACE} delete svc ${GREEN_NAME}
                            kubectl -n ${K8S_NAMESPACE} label --overwrite svc ${BLUE_NAME} deploy=green
                            kubectl -n ${K8S_NAMESPACE} patch service ${BLUE_NAME} --type='json' -p='[{"op": "replace", "path": "/spec/selector/deploy", "value":"green"}]'
                        """
                        println "Green으로 전환 완료" 
                        GREEN_DEPLOYED = true
                    } catch (Exception e) { 
                        println "Green으로 전환 skip.." 
                    }
                    if (!GREEN_DEPLOYED) {
                        try {
                            input("미사용 Green을 삭제하시겠습니까?")
                            sh """
                                kubectl -n ${K8S_NAMESPACE} delete -f ${GREEN_DEPLOY_DIR}/${DEPLOY_YAME}
                            """
                        } catch (Exception e) {
                            // 실패 발생시에 이유 검토하여 정리 필요
                            println "Green 삭제 실패..." 
                        }
                    }
                }
            }

            stage('DELETE BLUE') {
                container('kubectl') {
                    if (GREEN_DEPLOYED) {
                        try { 
                            input("Blue을 삭제 하시겠습니까?") 
                            println "Blue 삭제 시작" 
                            sh "kubectl -n ${K8S_NAMESPACE} delete deploy ${BLUE_NAME}"
                            println "Blue 삭제 완료" 
                        } catch (Exception e) { 
                            println "Blue 삭제 skip.." 
                        }
                    } else {
                        println "Green 배포가 중단되서 해당 작업은 진행하지 않습니다."
                    }
                }
            }
        }
    }
}